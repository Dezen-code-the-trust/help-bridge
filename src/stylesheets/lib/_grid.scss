@use "sass:math";
@use "vars" as *;

$grid-gutter-padding: math.div($grid-gutter-width, 2);

// mixins/_grid_framework.scss
@mixin make-grid-columns($i: 1, $list: ".xs-#{$i}, .sm-#{$i}, .md-#{$i}, .lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .xs-#{$i}, .sm-#{$i}, .md-#{$i}, .lg-#{$i}";
  }
  #{$list} {
    position: relative;
    min-height: 1px;
    padding-left: $grid-gutter-padding;
    padding-right: $grid-gutter-padding;
  }
}

@mixin float-grid-columns($class, $i: 1, $list: ".#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}

@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .#{$class}-#{$index} {
      width: math.percentage(math.div($index, $grid-columns));

      &.no-padding {
        padding: 0;
      }
    }

  }
  @if ($type == offset) {
    .#{$class}-offset-#{$index} {
      margin-left: math.percentage(math.div($index, $grid-columns));
    }
  }
}

@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, offset);
}

// mixins/_grid.scss
@mixin clearfix() {
  &:before, &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  @include clearfix;

  &.no-padding {
    padding: 0;
  }
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  float: left;
  width: calc(100% + #{$gutter});
  margin-left: math.div($gutter, -2);
  margin-right: math.div($gutter, -2);
  @include clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: math.percentage(math.div($columns, $grid-columns));
  min-height: 1px;
  margin-bottom: $gutter;
  padding-left: math.div($gutter, 2);
  padding-right: math.div($gutter, 2);
}

@mixin make-xs-column-offset($columns) {
  margin-left: math.percentage(math.div($columns, $grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left: math.div($gutter, 2);
  padding-right: math.div($gutter, 2);

  @media (min-width: $screen-sm-min) {
    float: left;
    width: math.percentage(math.div($columns, $grid-columns));
  }
}

@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: math.percentage(math.div($columns, $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left: math.div($gutter, 2);
  padding-right: math.div($gutter, 2);

  @media (min-width: $screen-md-min) {
    float: left;
    width: math.percentage(math.div($columns, $grid-columns));
  }
}

@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: math.percentage(math.div($columns, $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left: math.div($gutter, 2);
  padding-right: math.div($gutter, 2);

  @media (min-width: $screen-lg-min) {
    float: left;
    width: math.percentage(math.div($columns, $grid-columns));
  }
}

@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: math.percentage(math.div($columns, $grid-columns));
  }
}

// _grid.scss
.container {
  clear: both;
  @include container-fixed;

  @media (min-width: $screen-sm-min) {
    width: $container-sm;
  }
  @media (min-width: $screen-md-min) {
    width: $container-md;
  }
  @media (min-width: $screen-lg-min) {
    width: $container-lg;
  }
}

.row {
  @include make-row;
}

@include make-grid-columns;

@include make-grid(xs);

@media (min-width: $screen-sm-min) {
  @include make-grid(sm);
}

@media (min-width: $screen-md-min) {
  @include make-grid(md);
}

@media (min-width: $screen-lg-min) {
  @include make-grid(lg);
}

// Visibility utilities
@mixin responsive-visibility($parent) {
  #{$parent} {
    display: block !important;
  }
  table#{$parent} {
    display: table;
  }
  tr#{$parent} {
    display: table-row !important;
  }
  th#{$parent},
  td#{$parent} {
    display: table-cell !important;
  }
}

@mixin responsive-invisibility($parent) {
  #{$parent} {
    display: none !important;
  }
}

@-ms-viewport {
  width: device-width;
}

@include responsive-invisibility('.visible-xs, .visible-sm, .visible-md, .visible-lg');

@media (max-width: $screen-xs-max) {
  @include responsive-visibility('.visible-xs');

  .container {
    padding-left: $grid-gutter-padding;
    padding-right: $grid-gutter-padding;
  }
}

@media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
  @include responsive-visibility('.visible-sm');
}

@media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
  @include responsive-visibility('.visible-md');
}

@media (min-width: $screen-lg-min) {
  @include responsive-visibility('.visible-lg');
}

@media (max-width: $screen-xs-max) {
  @include responsive-invisibility('.hidden-xs');
}

@media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
  @include responsive-invisibility('.hidden-sm');
}

@media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
  @include responsive-invisibility('.hidden-md');
}

@media (min-width: $screen-lg-min) {
  @include responsive-invisibility('.hidden-lg');
}

.hidden {
  display: none;
}

.text-left {
  text-align: left;
}

.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

.vertical-align {
  float: none !important;
  display: inline-block !important;
  vertical-align: middle !important;
}

.vertical-center {
  display: flex !important;
  align-items: center !important;
  height: 100%;

  @include responsive(dispositivos_moviles) {
    display: block !important;
    height: auto;
  }
}

.default-padding {
  padding-left: $grid-gutter-padding;
  padding-right: $grid-gutter-padding;
}

.clear-left {
  clear: left;
}

.clear-both {
  clear: both;
}

.clear-right {
  clear: right;
}